// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Seller
  User
  SuperAdmin
}

enum PaymentMethod {
  CASHONDELIVERY
  STRIPE
}

model User {
  id          String   @id @default(uuid())
  name        String
  phoneNumber String   @unique
  email       String   @unique
  address     String?
  password    String
  isActive    Boolean  @default(true)
  role        Role     @default(User)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart[]
  order       Order[]
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  isActive   Boolean    @default(true)
  colors     Color[]
  sizes      Size[]
  categories Category[]
  products   Product[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Sale       Sale[]

  @@unique([userId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  public_id String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String    @db.Text
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  categoryId  String
  category    Category? @relation(fields: [categoryId], references: [id])
  sizeId      String?
  size        Size?     @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color     @relation(fields: [colorId], references: [id])
  price       Float
  stock       Int
  images      Image[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cartItems    CartItem[]
  WishListItem WishListItem[]
  Sale         Sale[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  cartId    String?
  cartItems CartItem[]

  @@unique([userId, cartId])
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  phone         String        @default("")
  city          String        @default("")
  houseNo       String        @default("")
  area          String        @default("")
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentStatus Boolean       @default(false)
  isDelivered   Boolean       @default(false)
}

model Wishlist {
  id            String         @id @default(uuid())
  userId        String
  wishListItems WishListItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WishListItem {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Sale {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
