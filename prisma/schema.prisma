// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Seller
  User
  SuperAdmin
}

model User {
  id          String   @id @default(uuid())
  name        String
  phoneNumber String   @unique
  email       String   @unique
  address     String?
  password    String
  isActive    Boolean  @default(true)
  role        Role     @default(User)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  isActive   Boolean    @default(true)
  colors     Color[]
  sizes      Size[]
  categories Category[]
  products   Product[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  order      Order[]
  cart       Cart[]

  @@unique([userId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  public_id String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  sizeId      String
  size        Size     @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id])
  price       String
  stock       Int
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  cartId    String
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  orders    Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
